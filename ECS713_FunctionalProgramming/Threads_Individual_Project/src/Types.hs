{-# LANGUAGE DeriveGeneric #-}

module Types 
  ( Request(..)
  , Response(..)
  , RequestQueue
  ) where

import Data.Time.Clock (UTCTime)
import Control.Concurrent.MVar (MVar)
import GHC.Generics (Generic)
import Data.Aeson (ToJSON, FromJSON)

-- | Represents a client request sent to the server.
data Request = Request
  { requestId      :: Int          --  Unique identifier for the request.
  , requestTime    :: UTCTime      --  Timestamp when the request was created.
  , requestContent :: String       -- Content or message of the request.
  } deriving (Show, Generic)

instance ToJSON Request
instance FromJSON Request

-- | Represents a response generated by the server.
data Response = Response
  { responseId      :: Int          --  ID of the corresponding request.
  , responseTime    :: UTCTime      --  Timestamp when the response was created.
  , responseContent :: String       --  Content or message of the response.
  } deriving (Show, Generic)

instance ToJSON Response
instance FromJSON Response

-- | A thread-safe queue to hold requests using MVar.
type RequestQueue = MVar [Request]
